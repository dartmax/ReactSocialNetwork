{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Message","props","className","s","dialog","message","DialogItem","path","id","active","to","name","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Button","variant","onClick","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,sGCWnKC,EALgB,SAACC,GAC5B,OAAO,yBAAKC,UAAWC,IAAEC,QAASH,EAAMI,U,QCY7BC,EAXmB,SAACL,GAC/B,IAAIM,EAAO,YAAcN,EAAMO,GAE/B,OACI,yBAAKN,UAAWC,IAAEC,OAAS,IAAMD,IAAEM,QAC/B,kBAAC,IAAD,CAASC,GAAIH,GAAON,EAAMU,Q,mCCPhCC,EAAcC,YAAiB,IAkBtBC,cAAoC,CAACC,KAAM,2BAA3CD,EAbgF,SAACb,GAC5F,OACI,0BAAMe,SAAUf,EAAMgB,cAClB,6BACGC,YAA0C,mBAAoB,iBAAkB,CAACC,IAAUP,GAAcQ,MAE5G,6BACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAWC,QAAStB,EAAMgB,cAA1C,aCuBDO,EA1BmB,SAACvB,GAC/B,IAAIwB,EAAQxB,EAAMyB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OAAgC,kBAAC,EAAD,CAAYnB,KAAMmB,EAAEnB,KAAMoB,IAAKD,EAAEtB,GAAIA,GAAIsB,EAAEtB,QAC/GwB,EAAmBP,EAAMQ,SAASJ,KAAI,SAACK,GAAD,OAAmC,kBAAC,EAAD,CAAS7B,QAAS6B,EAAE7B,QAAS0B,IAAKG,EAAE1B,QAMjH,OACI,6BACI,yBAAKN,UAAWC,IAAEyB,SACd,yBAAK1B,UAAWC,IAAEgC,cACbR,GAEL,yBAAKzB,UAAWC,IAAE8B,UACd,6BAAMD,KAGd,kBAAC,EAAD,CAAgBhB,SAdJ,SAACoB,GACjBnC,EAAMoC,YAAYD,EAAOE,qB,0BClB7BC,EAA6B,SAACd,GAAD,MAA0B,CACvDe,OAAQf,EAAMgB,KAAKD,SCSRE,sBACXC,aAPkB,SAAClB,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAKhB,eAAsBkB,ODD1B,SAA+BC,GAQlC,OADqCF,YAA6CJ,EAA4B,GAAzEI,EANiC,SAAC1C,GAAW,IAC7EuC,EAAwBvC,EAAxBuC,OAAWM,EADiE,YACpD7C,EADoD,YAG7E,OAAKuC,EACE,kBAACK,EAAqBC,GADT,kBAAC,IAAD,CAAUpC,GAAG,gBCJ1BgC,CAGblB","file":"static/js/5.df359da0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React, {FC} from \"react\";\nimport s from './../Dialogs.module.css'\n\ntype PropsType = {\n    message: string\n}\n\nconst Message: FC<PropsType> = (props) => {\n    return <div className={s.dialog}>{props.message}</div>\n}\n\n\nexport default Message;\n","import React, {FC} from \"react\";\nimport s from './../Dialogs.module.css'\nimport {NavLink} from \"react-router-dom\";\n\ntype PropsType = {\n    id: number\n    name: string\n}\n\nconst DialogItem: FC<PropsType> = (props) => {\n    let path = \"/dialogs/\" + props.id;\n\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\nexport default DialogItem;\n","import React, {FC} from \"react\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, Textarea} from \"../../../Common/FormsControls/FormsControls\";\nimport {Button} from '@material-ui/core';\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {NewMessageFormValuesType} from \"../Dialogs\";\n\nconst maxLength50 = maxLengthCreator(50);\n\n\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\ntype PropsType = {}\nconst AddMessageForm: FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\n    return(\n        <form onSubmit={props.handleSubmit}>\n            <div>\n              {createField<NewMessageFormValuesKeysType>(\"Add your message\", \"newMessageBody\", [required, maxLength50], Textarea)}\n            </div>\n            <div>\n                <Button variant=\"outlined\" onClick={props.handleSubmit}>Send</Button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm<NewMessageFormValuesType>({form: \"dialog-add-message-form\"})(AddMessageForm);","import React, {FC} from \"react\";\nimport s from './Dialogs.module.css'\nimport Message from \"./Message/Message\";\nimport DialogItem from \"./DialogItem/DialogsItem\";\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\"\nimport {initialStateType} from \"../../redux/dialogs-reducer\";\n\ntype OwnPropsType = {\n    dialogsPage: initialStateType\n    sendMessage:(messageText: string) => void\n}\n\nexport type NewMessageFormValuesType ={\n    newMessageBody: string\n}\n\nconst Dialogs: FC<OwnPropsType> = (props) => {\n    let state = props.dialogsPage;\n\n    let dialogsElements = state.dialogs.map((d: { name: any; id: any; }) => <DialogItem name={d.name} key={d.id} id={d.id}/>);\n    let messagesElements = state.messages.map((m: { message: any; id: any; }) => <Message message={m.message} key={m.id}/>);\n\n    let addNewMessage = (values: NewMessageFormValuesType) => {\n        props.sendMessage(values.newMessageBody);\n    };\n\n    return (\n        <div>\n            <div className={s.dialogs}>\n                <div className={s.dialogsItems}>\n                    {dialogsElements}\n                </div>\n                <div className={s.messages}>\n                    <div>{messagesElements}</div>\n                </div>\n            </div>\n            <AddMessageForm onSubmit={addNewMessage}/>\n        </div>\n    )\n};\n\n\nexport default Dialogs;\n","import React from \"react\";\nimport {Redirect} from 'react-router-dom';\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/redux-store\";\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth\n}as MapPropsType);\n\ntype MapPropsType = {\n    isAuth: boolean\n}\n\ntype DispatchPropsType = {}\n\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>){\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n    let {isAuth, ...restProps} = props\n\n        if (!isAuth) return <Redirect to='/login'/>;\n        return <WrappedComponent {...restProps as unknown as WCP} />\n    }\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect, {}) (RedirectComponent)\n    return ConnectedAuthRedirectComponent;\n}","import React from 'react';\nimport {compose} from 'redux';\nimport {connect} from 'react-redux';\n\nimport Dialogs from './Dialogs';\nimport {actions} from '../../redux/dialogs-reducer';\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\nimport {AppStateType} from \"../../redux/redux-store\";\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n};\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {...actions}),\n    withAuthRedirect\n)(Dialogs)\n"],"sourceRoot":""}