{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["ws","WebSocket","Chat","Messages","AddMessageForm","useState","messages","setMessages","useEffect","addEventListener","e","newMesseges","JSON","parse","data","prevMessages","style","height","overflowY","map","m","index","Message","key","message","src","photo","width","borderRadius","alt","userId","toString","userName","setMessage","onChange","currentTarget","value","onClick","send","ChatPage"],"mappings":"gJAEMA,EAAK,IAAIC,UAAU,gEAenBC,EAAW,WACf,OAAO,6BACL,kBAACC,EAAD,MACA,kBAACC,EAAD,QAIED,EAAe,WAAO,IAAD,EACOE,mBAA4B,IADnC,mBAClBC,EADkB,KACRC,EADQ,KASzB,OAPAC,qBAAU,WACRR,EAAGS,iBAAiB,WAAW,SAACC,GAC9B,IAAMC,EAAcC,KAAKC,MAAMH,EAAEI,MACjCP,GAAY,SAACQ,GAAD,4BAAsBA,GAAtB,YAAuCJ,YAEpD,IAEI,yBAAKK,MAAO,CAAEC,OAAQ,QAASC,UAAW,SAC9CZ,EAASa,KAAI,SAACC,EAAGC,GAAJ,OAAc,kBAACC,EAAD,CAASC,IAAKF,EAAOG,QAASJ,SAIxDE,EAA0C,SAAC,GAAe,IAAdE,EAAa,EAAbA,QAChD,OAAO,6BACL,yBAAKC,IAAKD,EAAQE,MAAOV,MAAO,CAACW,MAAO,OAAQC,aAAc,QAASC,IAAKL,EAAQM,OAAOC,aADtF,IACoG,2BAAIP,EAAQQ,UACrH,6BACCR,EAAQA,QACT,+BAIEpB,EAAqB,WAAO,IAAD,EACDC,mBAAS,IADR,mBACxBmB,EADwB,KACfS,EADe,KAS/B,OAAO,6BACL,6BACE,8BAAUC,SAAU,SAACxB,GAAD,OAAOuB,EAAWvB,EAAEyB,cAAcC,QAAQA,MAAOZ,KAEvE,6BACE,4BAAQa,QAZQ,WACdb,IAGJxB,EAAGsC,KAAKd,GACRS,EAAW,OAOT,WAMSM,UAxDM,WACnB,OAAO,6BACL,kBAACrC,EAAD","file":"static/js/6.befe98f9.chunk.js","sourcesContent":["import React, {FC, useEffect, useState} from \"react\";\n\nconst ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\n\nexport type ChatMessageType = {\n  message: string\n  photo: string\n  userId: number\n  userName: string\n}\n\nconst ChatPage: FC = () => {\n  return <div>\n    <Chat />\n  </div>\n}\n\nconst Chat: FC = () => {\n  return <div>\n    <Messages />\n    <AddMessageForm />\n  </div>\n}\n\nconst Messages: FC = () => {\n  const [messages, setMessages] = useState<ChatMessageType[]>([]);\n  useEffect(() => {\n    ws.addEventListener('message', (e: MessageEvent) => {\n      const newMesseges = JSON.parse(e.data);\n      setMessages((prevMessages) => [...prevMessages, ...newMesseges]);\n    })\n  }, []);\n\n  return <div style={{ height: \"400px\", overflowY: \"auto\"}}>\n    {messages.map((m, index) => <Message key={index} message={m}/>)}\n  </div>\n}\n\nconst Message: FC<{message: ChatMessageType}> = ({message}) => {\n  return <div>\n    <img src={message.photo} style={{width: \"30px\", borderRadius: \"30px\"}} alt={message.userId.toString()}/> <b>{message.userName}</b>\n    <br/>\n    {message.message}\n    <hr/>\n  </div>\n}\n\nconst AddMessageForm: FC = () => {\n  const [message, setMessage] = useState('')\n  const sendMessage = () => {\n    if(!message) {\n      return;\n    }\n    ws.send(message);\n    setMessage('');\n  }\n  return <div>\n    <div>\n      <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}/>\n    </div>\n    <div>\n      <button onClick={sendMessage}>Send</button>\n    </div>\n  </div>\n}\n\n\nexport default ChatPage;\n"],"sourceRoot":""}